#include "includes/jetton/stdlib.func";

;;; returns the last 0 ≤ l ≤ 1023 bits of s.
slice get_last_bits(slice s, int l) asm "SDCUTLAST";
;;; returns all but the last 0 ≤ l ≤ 1023 bits of s.
slice remove_last_bits(slice s, int l) asm "SDSKIPLAST";


;; //--//----------------------------------------------------------------[  CONSTANTS  ]----------------------------------------------------------------//--//

const int SIGNATURE_SIZE = 512;

const int DEPLOY_COMISSION = 500000000;  ;; 0.5 TON
const int MIN_BASE_JETTPN_DEPLOY = 100000000; ;; 0.1 TON
const int MIN_JETTON_AMOUNT_TO_MINT = 50000000; ;; 0.05 TON

const int TOTAL_COMISSION = DEPLOY_COMISSION + MIN_BASE_JETTPN_DEPLOY + MIN_JETTON_AMOUNT_TO_MINT; ;; 0.5 TON + 0.1 TON + 0.05 TON = 0.65 TON

;; //--//----------------------------------------------------------------[  STORAGE  ]----------------------------------------------------------------//--//

(int, int, slice, cell) load_data() impure inline {
    slice smc_storage = get_data().begin_parse();
    int admin_public_key = smc_storage~load_uint(256);
    int seqno = smc_storage~load_uint(32);
    slice admin_address = smc_storage~load_msg_addr();
    cell minter_code = smc_storage~load_ref();
    return (
        admin_public_key,
        seqno,
        admin_address,
        minter_code
    );
}

() store_data(int admin_public_key, int seqno, slice admin_address, cell minter_code) impure inline {
    set_data(
        begin_cell()
            .store_uint(admin_public_key, 256)
            .store_uint(seqno, 32)
            .store_slice(admin_address)
            .store_ref(minter_code)
        .end_cell()
    );
}

;; //--//----------------------------------------------------------------[  FUNCS  ]----------------------------------------------------------------//--//

cell calculate_minter_state_init(cell minter_code, cell minter_config_cell) inline {
    return 
        begin_cell()
            .store_uint(0, 1 + 1)           
            .store_dict(minter_code)  
            .store_dict(minter_config_cell)
            .store_uint(0, 1)               
        .end_cell();
}


slice calculate_minter_address(cell minter_state_init) inline {
    return 
        begin_cell()
            .store_uint(4, 3)
            .store_int(0, 8)
            .store_uint(cell_hash(minter_state_init), 256)
        .end_cell().begin_parse();
}

() deploy_jetton_minter(cell minter_state_init, slice deployer_address, slice jetton_minter_address, int jetton_amount_to_mint) impure inline {

    cell deploy_body = 
        begin_cell()
            .store_uint(21, 32)
            .store_uint(now(), 64)
            .store_slice(deployer_address)
            .store_coins(MIN_JETTON_AMOUNT_TO_MINT)
            .store_ref(
                begin_cell()
                    .store_uint(0x178d4519, 32)
                    .store_uint(now(), 64)
                    .store_coins(jetton_amount_to_mint)
                    .store_slice(jetton_minter_address)
                    .store_uint(0, 2) ;; null response address
                    .store_coins(0)   ;; null forward ton amount
                    .store_uint(0, 1) ;; null forward payload
                .end_cell())
        .end_cell();


    cell transfer = 
        begin_cell()
                .store_uint(0x18, 6)
                .store_slice(jetton_minter_address)
                .store_coins(MIN_BASE_JETTPN_DEPLOY)
                .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
                .store_ref(minter_state_init)
                .store_ref(deploy_body)
        .end_cell();

    send_raw_message(transfer, 1);
}

;; //--//----------------------------------------------------------------[  MAIN  ]----------------------------------------------------------------//--//

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if in_msg_body.slice_empty?() { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if flags & 1 {
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    (int admin_public_key, int stored_seqno, slice admin_address, cell minter_code) = load_data();

    ;; //--//----------------------------------------------------------------[  ADMIN SPACE  ]----------------------------------------------------------------//--//

    if equal_slices(sender_address, admin_address) {
       int op_code = in_msg_body.preload_uint(32);
        if op_code == 41 { ;; admin button
            in_msg_body.skip_bits(32);
            slice message = in_msg_body~load_ref().begin_parse();
            int mode = message~load_uint(8);
            send_raw_message(message~load_ref(), mode);
            return ();
        }
    }

    ;; //--//----------------------------------------------------------------[  USER SPACE  ]----------------------------------------------------------------//--//

    throw_unless(400, msg_value >= TOTAL_COMISSION);

    cell signed_cell = in_msg_body~load_ref();
    var signature = in_msg_body~load_bits(512);

    int signature_valid = check_signature(cell_hash(signed_cell), signature, admin_public_key);

    if signature_valid == 0 {
        throw(403);
    }

    slice signed_slice = signed_cell.begin_parse();
    
    int op_code = signed_slice~load_uint(32);
    int ctx_seqno = signed_slice~load_uint(32);

    throw_unless(401, ctx_seqno == stored_seqno);

    if op_code == 42 {
        
        int jetton_amount_to_mint = signed_slice~load_uint(256);
        cell minter_config_cell = signed_slice~load_ref();
        signed_slice.end_parse();
        
        cell minter_state_init = calculate_minter_state_init(minter_code, minter_config_cell);
        slice minter_address = calculate_minter_address(minter_state_init);

        deploy_jetton_minter(minter_state_init, sender_address, minter_address, jetton_amount_to_mint);
        store_data(admin_public_key, stored_seqno + 1, admin_address, minter_code);
        return ();
    }

    throw(0xffff);
}

;; //--//----------------------------------------------------------------[  GETTERS  ]----------------------------------------------------------------//--//

(int, int, slice, cell) get_factory_data() method_id {
    return load_data();
}

int get_seqno() method_id {
    (_, int stored_seqno, _, _) = load_data();
    return stored_seqno;
}
