#include "includes/book/stdlib.func";
#include "includes/book/errors.func";
#include "includes/book/op_codes.func";
#include "includes/book/constants.func";
#include "includes/book/usdt_utils.func";
#include "includes/book/jetton_utils.func";

#include "modules/book/store.func";
#include "modules/book/msg.func";
#include "modules/book/utils.func";
#include "modules/book/order.func";
#include "modules/book/askbid.func";
#include "modules/book/crypto.func";
#include "modules/book/actions.func";
#include "modules/book/getters.func";

() recv_internal( int my_balance, int msg_value, cell in_msg_full, slice in_msg_body ) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice recv_msg = in_msg_full.begin_parse();
    int msg_flags = recv_msg~load_msg_flags();

    if (is_bounced(msg_flags)) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = recv_msg~load_msg_addr();

    int init? = load_globals();

    ( int op_code, int query_id ) = in_msg_body~load_op_and_query_id();
    
    if ~ init? {
        throw_unless(error::forbitten, equal_slices_bits(init::book_minter_address, sender_address));
        if op_code == op::minter_book_init {
            action::init(in_msg_body, op_code);
            return ();
        }
    }

    if op_code == op::jetton_transfer_notification { 
        action::jetton_transfer_notification(in_msg_body, msg_value, op_code, sender_address, query_id);
        return ();
    }

    if op_code == op::ob::cancel_order {
        action::cancel_order(in_msg_body, msg_value, op_code, sender_address, query_id);
        return ();
    }

    int err = action::admin_actions(in_msg_body, op_code, sender_address);
    if err == 0 {
        return ();
    }

    throw(op::unknown_op);
}